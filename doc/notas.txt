Instalación de Laravel Debugbar
composer require barryvdh/laravel-debugbar --dev

Instalación de Laravel N+1 Query Detector
composer require beyondcode/laravel-query-detector --dev

https://laracasts.com/discuss/channels/laravel/migration-for-stored-procedure

Rule::existes('professions', 'id')->whereNull('deleted_at')

Notas

helpers optional()

Cuando recibimos el error Call to undefined method Illumuinate\Database\Query\Builder::all() esto se debe a que cada vez que modificamos las consultas debemos llamar al método get() en lugar de all():
App\Profession::orderBy('title', 'ASC')->all() // Mal
App\Profession::orderBy('title', 'ASC')->get() // Bien

En nuestro caso, cuando utilizamos orderBy Laravel va a utilizar métodos mágicos para construir la consulta y al hacer esto ya no tenemos el método all() disponible.

App\Profession::orderBy('title', 'asc')->get()

Para definir una relación de muchos a muchos en base de datos vamos a necesitar y a utilizar una tabla pivote. La tabla pivote va a contener 2 campos con las llaves foráneas de las tablas relacionadas, en el ejemplo del video: user_id y skill_id:

Para definir una relación de muchos a muchos en base de datos vamos a necesitar y a utilizar una tabla pivote. La tabla pivote va a contener 2 campos con las llaves foráneas de las tablas relacionadas, en el ejemplo del video: user_id y skill_id:

public function skills()
    {
        return $this->belongsToMany(Skill::class, 'user_skill');
    }

Para guardar datos en una relación muchos a muchos con Eloquent, necesitas interactuar con el método de la relación y llamar a los métodos attach, attachNew o sync, por ejemplo:

PHP
<?php
//...
$user->skills()->attach([1, 2]);

<?php
//...
$user->skills()->attach([1, 2]);

El método attach también acepta un modelo o una colección de modelos como argumentos

Corrección de errores
Si recibimos el error:

BadMethodCallException: Call to undefined method Illuminate\Database\Query\Builder::skills()
1
BadMethodCallException: Call to undefined method Illuminate\Database\Query\Builder::skills()
Se nos está informando de que estamos tratando de llamar a un método no definido. En nuestro caso se trata del método skills().

Una vez agregado el método de la relación podemos recibir otro error:

Symfony\Component\Debug\Exception\FatalThrowableError: Call to a member function attach() on null

Esto sucede cuando la relación que tratamos de utilizar, en nuestro caso skills() en User.php, no está retornando nada. Para solucionar esto simplemente agregamos el código de la relación dentro del método:

PHP
public function skills()
{
    return $this->belongsToMany(Skill::class);
}

public function skills()
{
    return $this->belongsToMany(Skill::class);
}


Métodos disponibles al incluir el trait SoftDeletes

Una vez incluido este trait dispondrás de diversos métodos:

    $modelo->trashed() indica si el registro ha sido eliminado de manera lógica.
    $modelo->restore() restaura un modelo previamente eliminado de forma lógica.
    $modelo->forceDelete() elimina un registro para siempre :'(

Además cuando uses SoftDeletes Eloquent va a excluir dichos registros de las consultas a la base de datos, puedes incluirlos de nuevo con:

    Model::onlyTrashed()->get() incluye solamente resultados que hayan sido eliminados de forma lógica
    Model::withTrashed()->get() incluye todos los resultados, eliminados de manera lógica o no.

Eloquent: Definir propiedades dinámicas o Acessors en Laravel

Con Laravel tenemos la posibilidad de tratar con atributos que no representan una columna de la tabla asociada al modelo, para usar una propiedad dinámica creamos un método cuyo nombre debe seguir una convención  getNombreAttributte. Por ejemplo:
#
public function getNameAttribute()
{
    return "{$this->first_name} {$this->last_name}";
}
    
#
public function getNameAttribute()
{
    return "{$this->first_name} {$this->last_name}";
}

------------
Query Builder: Expresiones sin formato

Escribir consultas complicadas con Laravel no es un problema gracias a su poderoso Query Builder, si deseamos agregar algunas expresiones de SQL como CONCAT podemos hacerlo de varias formas. Vamos a comenzar observando cómo podemos lograrlo utilizando el Facade DB y el método raw:
#
use Illuminate\Support\Facades\DB;

$query->where(DB::raw('CONCAT(first_name, " ", last_name)', 'like', "%{$search}%"))
    ->get();
1
2
3
4
5
    
#
use Illuminate\Support\Facades\DB;
 
$query->where(DB::raw('CONCAT(first_name, " ", last_name)', 'like', "%{$search}%"))
    ->get();

Laravel nos proporciona algunos métodos para simplificar las expresiones sin tener que utilizar el Facade DB, entre ellos tenemos whereRaw:
#
use Illuminate\Support\Facades\DB;

$query->whereRaw('CONCAT(first_name, " ", last_name) like ?', "%{$search}%"))
    ->get();
    
#
use Illuminate\Support\Facades\DB;
 
$query->whereRaw('CONCAT(first_name, " ", last_name) like ?', "%{$search}%"))
    ->get();

El método recibe como primer argumento toda la consulta a excepción del parámetro o parámetros dinámicos los cuales deben ser pasados como “bindings” a través del segundo parámetro.

El primer parámetro de los métodos para escribir expresiones es código SQL por lo tanto no va a ser escapado por Laravel ni por PDO. En caso de tener un valor dinámico debes pasarlo como segundo argumento para trabajar con bindings y colocar solo el placeholder (?) en la parte de la consulta SQL. En caso de no hacerlo estarías exponiendo tu aplicación a posibles ataques de inyección de SQL.

----
Laravel Scout y Algolia fueron cubiertos de manera extensa en nuestro Curso de novedades en Laravel 5.3, te recomendamos ver las lecciones y/o leer las notas de dichas lecciones si deseas ampliar el conocimiento aprendido en este video:

    Introducción a Algolia
    Configuración y uso de una base de datos ya existente (Sakila) en un proyecto de Laravel 5.3
    Instalación y configuración de Laravel Scout con Algolia en Laravel 5.3
    Indexar datos en Algolia con Laravel Scout en Laravel 5.3
    Búsquedas de texto con Algolia y Laravel Scout en Laravel 5.3

----------
Model Factories con Callbacks

Algunas veces necesitamos generar registros con un poco más de complejidad, para ello los model factories de Laravel nos presentan ciertas opciones o callbacks que podemos utilizar. Por ejemplo, para agregar un perfil de usuario luego de la creación del usuario escribimos lo siguiente:
<?php

$factory->afterCreating(App\User::class, function ($user, $faker) {
    $user->profile()->save(factory(App\UserProfile::class)->make());
});

    
<?php
 
$factory->afterCreating(App\User::class, function ($user, $faker) {
    $user->profile()->save(factory(App\UserProfile::class)->make());
});